An opinionated Emacs configuration intended for Neovim users with an IDE-like experience.  This config attempts to meld the quick, powerful editing conventions of Vim with the extensibility and power of Emacs along with aiming for modern development environment sensibilities.
* Features
 - *[[https://evil.readthedocs.io/][Evil Mode]]* for [[https://www.vim.org/][Vim]]-like modal editing
 - *[[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]]* incremental parsing of supported languages for syntax highlighting, indentation, and similar features, [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Parser_002dbased-Font-Lock.html][built-in to Emacs 29]] and later
 - *[[https://langserver.org/][Language Server Protocol (LSP)]]* via the [[https://github.com/joaotavora/eglot][Eglot]] LSP client, [[https://www.gnu.org/software/emacs/manual/html_node/eglot/index.html][built-in to Emacs 29]] and later
 - *[[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol (DAP)]]* based debugging tool integrations
 - *On-the-fly syntax checker* in the form of Emacs's built-in [[https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html][Flymake]] that integrates with Eglot and has support for 3rd party back-ends
 - *In-editor transparent remote file access* via Emacs's built-in [[https://www.gnu.org/software/emacs/manual/html_node/tramp/index.html][TRAMP]] package
 - *Advanced calculator with computer algebra system (CAS)* via Emacs's built-in [[https://www.gnu.org/software/emacs/manual/html_node/calc/index.html][calc]] package
 - *Advanced built-in shell* with high level of Emacs integration via Emacs's built-in [[https://www.gnu.org/software/emacs/manual/html_node/eshell/index.html][Eshell]] package
 - *Advanced note-taking, knowledge management, and organization systems* via Emacs's built-in [[https://orgmode.org/][Org Mode]] package along with [[https://www.orgroam.com/][Org Roam]]
 - *[[https://jwiegley.github.io/use-package/][Use-package]]* based simplified configuration and package management, [[https://www.gnu.org/software/emacs/manual/html_node/use-package/index.html][built-in to Emacs 29]] and later
 - *[[https://github.com/progfolio/elpaca][Elpaca]]* for improved asynchronous package management with a convenient UI and easy installation from upstream sources
* Requirements
This configuration assumes at least GNU Emacs 29.1 with built-in tree-sitter (=treesit=), LSP (=eglot=), and =use-package=.  It also assumes a build environment is set up and available to it for native builds of some packages.  In addition, it also currently assumes certain additional tools are installed such as specific tree-sitter language implementations and some LSP servers.
* Installation
Ensure you have Emacs, preferably 29.1 or later, installed in the =PATH=.

Checkout this repository into your home directory as =~/.emacs.d=:
#+begin_src sh
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src

Make sure there aren't any other Emacs configs that could get picked up at =~/.emacs= or =~/.emacs.el=.

Start Emacs and wait for all the packages to install and compile.

Enjoy :)
* Emacs Installation
** Linux
*** Debian (stable)
Ensure stable backports repository is enabled.  If it's not, enable it with—assuming you're using Debian 12 Bookworm:
#+begin_src bash
  echo -e "Types: deb\nURIs: http://deb.debian.org/debian\nSuites: bookworm-backports\nComponents: main contrib\nSigned-By: /usr/share/keyrings/debian-archive-keyring.gpg" > /etc/apt/sources.list.d/backports.sources
#+end_src
or
#+begin_src bash
  echo "deb http://deb.debian.org/debian bookworm-backports main" >> /etc/apt/sources.list.d/backports.list
#+end_src
Install Emacs and dependencies:
#+begin_src bash
  apt install git build-essential curl
  apt install -t bookworm-backports emacs
#+end_src
Install this config:
#+begin_src bash
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
Launch Emacs.
*** Arch Linux
Install Emacs and dependencies:
#+begin_src bash
  pacman -S emacs-nativecomp git base-devel curl
#+end_src
Install this config:
#+begin_src bash
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
Launch Emacs.
*** Gentoo
Assuming you're using a desktop profile, add the following portage use flag configuration in a file under =/etc/portage/package.use/=, probably named something like =emacs=:
#+begin_example
  >=app-editors/emacs-29.1 harfbuzz imagemagick jit json libxml2 source sqlite toolkit-scroll-bars tree-sitter webp xwidgets
  >=sys-devel/gcc-12.3.1 jit
#+end_example
Install Emacs:
#+begin_src bash
  sudo emerge -avn app-editors/emacs dev-vcs/git net-misc/curl
#+end_src
Install this config:
#+begin_src bash
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
And launch Emacs.
*** Guix
#+begin_src bash
  guix install emacs
#+end_src
Really.  That's it.  It even has ahead-of-time native compilation enabled.
#+begin_src
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
You still need to grab this config and launch Emacs though.
*** Fedora
Install Emacs and dependencies:
#+begin_src bash
  sudo dnf group install "Development Tools"
  sudo dnf install emacs
#+end_src
Install this config:
#+begin_src bash
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
Launch Emacs.
*** Ubuntu
Install Emacs and dependencies:
#+begin_src bash
  sudo apt install emacs git build-essential curl
#+end_src
Install this config:
#+begin_src bash
  git clone git@github.com:Ryan-B-W/vimacs.app.git ~/.emacs.d
#+end_src
Launch Emacs.
*** Nix
Sorry, but you're on your own.  Then again, you expected as much.  Didn't you?
** Mac OS
Using Homebrew:
#+begin_src bash
  brew tap railwaycat/emacsmacport
  brew install emacs-mac --with-modules
  ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/Emacs.app
#+end_src
[[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#on-macos][See also the guide from Doom Emacs where this was unapologeticlly taken from]].
** Windows
Follow [[https://learn.microsoft.com/en-us/windows/wsl/install][the official]] instructions for getting setup with WSL2.  Once that is done, pick a Linux distribution of your choice and continue installation by following the Linux instructions for it above.

For distribution recommendations, latest Debian stable—Debian 12, Bookworm at time of writing—with the stable backports suite enabled is recommended by the author of this config.

You can install Windows native Emacs, but your mileage will vary and some things may not be available.  Importantly, Windows native filesystem performance is fairly poor and will noticeably impact performance when doing things like git operations and file searches.  In addition, Emacs performance under Windows in general has historically been pretty poor in general if perhaps tolerable.  However, accessing Windows filesystem files from within WSL2 has even worse performance than native Windows filesystem access and is a compelling reason to use Windows native Emacs instead of WSL2.

The maintainer of this configuration doesn't use Windows, so testing is up to the users.

If you opt for Windows native Emacs, see the official [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/index.html][Emacs FAQ for MS Windows]].  As above, checkout this repository as the Emacs init directory using git.
** Other
You probably know what you're doing.  Good luck.
* Updates
** Vimacs.app Updates
To update Vimacs.app, just open up the Emacs config directory in Emacs or a terminal, pull, and then checkout the desired git ref.  For example:
#+begin_src bash
  cd ~/.emacs.d/
  git pull origin main
#+end_src
** Updating Emacs Packages
Vimacs.app uses the [[https://github.com/progfolio/elpaca][Elpaca]] package manager for managing Emacs packages.  To update the installed Emacs packages, the procedure is to fetch the changes to each package from upstream, select the desired changes to be merged in Elpaca, and execute the queued merge actions.  This can be done through the Elpaca management UI which can be opened with ~M-x~~elpaca-manager~.

In the Elpaca management UI, the list of currently installed packages can be viewed with ~elpaca-ui-search-installed~ (bound to =g i=).  Elpaca can be instructed to fetch updates for all installed packages with ~M-x~~elpaca-fetch-all~.  Individual packages can be marked to be fetched with ~elpaca-ui-mark-fetch~ (bound to =p=) and then all pending actions can be executed with ~elpaca-ui-execute-marks~ (bound to =x=).  Once Elpaca has finished fetching updates, it displays a list of new commits which can each be selected to be merged with ~elpaca-ui-mark-merge~ (bound to =m=) and then executed as usual with ~elpaca-ui-execute-marks~.  Alternatively, all updates can be merged with ~elpaca-merge-all~.

It is also possible to update all packages in one go with ~elpaca-pull-all~; however, the [[https://github.com/progfolio/elpaca/blob/master/doc/manual.md][Elpaca manual]] recommends going through the fetch, select, and merge process in order to review the changes made to the packages, so the user isn't surprised by some major change to an installed package.
* Todo
 - [ ] Make =Escape= and =C-g= equivalent
 - [ ] Fix diff-hl not syncing with magit changes
 - [ ] Have some way of reliably managing external dependencies, such as language servers, across all supported platforms
 - [ ] Make initial startup much quieter by silencing expected native- and byte-compilation warnings
 - [ ] Add configurable grammar checker
 - [ ] Add optional AI assistant and completion
   - This is contingent on finding an /actually/ legally safe language model, not simply one that claims to be safe but has training data of questionable at best legality
 - [ ] Integrate with Emacs's built in ~customize~ UI for configuring Vimacs.app
 - [ ] Add more language/tool/platform specific helpers and tools like python virtual environment management
 - [ ] Add more communications stuff like a properly integrated IRC setup, Matrix client, mail client, RSS reader, etc.
   - There are a few of a couple of those built-in, but they need to be configured, and a couple have packages that are better than the built-in option
 - [ ] Add more media stuff like music, video, and podcast listening/watching
 - [ ] External CalDAV/WebCAL/ICS compatible calendar integration
 - [ ] Determine if the version of Slime helper from Quicklisp should be replaced with the Slime package from NonGNU Elpa, Melpa Stable, Melpa, or if it is still the best option
 - [ ] Add introduction tutorial for new users who may not be familiar with Emacs and Vim
 - [ ] Document the various features of Vimacs.app and how to use them
   - This would serve as both a way for new users to get familiar with what the configuration has to offer and as an entrypoint into the relevant documentation for the packages that provide that functionality
 - [ ] Add binding for opening attachment(s) of Org Roam node at point
